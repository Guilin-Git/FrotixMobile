@page "/vistoria"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using Microsoft.Maui.Media
@using System.Text.Json
@using System.IO
@using FrotixTeste.Services
@inject VistoriaService vistoriaService
@using System.Diagnostics;
@using FrotixTeste.Models



@if (carregando)
{
    <h4>Vistoria</h4>
    <p>🔄 Carregando dados...</p>
}
else
{

    <PageTitle>Vistoria</PageTitle>
    <div class="inspection-form">
        <!-- Título Principal -->
        <h1>FICHA DE VISTORIA DE VEÍCULOS</h1>

        <!-- Seção 1: Dados principais -->
        <div class="section">
            <div class="form-row">
                <label>Placa do Veículo:</label>
                <!-- Placa -->
                <SfComboBox TValue="Guid ?" TItem="PlacaFields" Placeholder="Selecione a Placa"
                                  DataSource="@Placas" @bind-Value="vistoriaAtual.PlacaID"
                                  EnableVirtualization="true">
                    <ComboBoxFieldSettings Value="VeiculoId" Text="Placa"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
            <div class="form-row">
                <label>Motorista:</label>
                <!-- Motorista -->
                <SfComboBox TValue="Guid ?" TItem="MotoristaFields"
                                  Placeholder="Selecione o Motorista"
                                  DataSource="@Motoristas"
                                  @bind-Value="vistoriaAtual.MotoristaID"
                                  EnableVirtualization="true">
                    <ComboBoxFieldSettings Value="MotoristaID" Text="Nome"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
            <div class="form-row">
                <label>Número da Ficha:</label>
                <!-- Número da Ficha -->
                <SfNumericTextBox TValue="int?" Placeholder="Número da Ficha" @bind-Value="vistoriaAtual.NumeroFicha" />
            </div>
        </div>

        <!-- Seção: Vistoria Inicial -->
        <div class="section-title">VISTORIA INICIAL</div>
        <div class="section">
            <div class="form-row">
                <!-- Data/Hora Inicial -->
                <SfDateTimePicker TValue="DateTime ?" Placeholder="Data/Hora Inicial"
                                                         Min="@min" Max="@max" EnableMask="true"
                                                         @bind-Value="vistoriaAtual.DataHoraInicio" />
            </div>
            <div class="form-row">
                <SfCheckBox @bind-Checked="vistoriaAtual.CRLV" Label="CRLV"></SfCheckBox>
                <SfCheckBox @bind-Checked="vistoriaAtual.CartaoAbastecimento" Label="Cartão de Abastecimento"></SfCheckBox>
            </div>
            <div class="form-row">
                <label>Nível de combustível:</label>

                <SfDropDownList TValue="string" TItem="string"
                                                      @bind-Value="vistoriaAtual.NivelCombustivelInicial"
                                                      Placeholder="Selecione o Nível de Combustível Inicial"
                                                      DataSource="@combustivelOptions">
                </SfDropDownList>

            </div>
            <div class="form-row">
                <label>Ponto Inicial:</label>
                <SfComboBox TValue="string" TItem="PontoFields" Placeholder="Ponto Inicial"
                                                DataSource="@Pontos" @bind-Value="vistoriaAtual.PontoID"
                                                EnableVirtualization="true">
                    <ComboBoxFieldSettings Value="PontoID" Text="Descricao"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>

        <!-- Seção: Tabela de Setor Solicitante, Nome, etc. -->
        <div class="section">
            <table class="request-table">
                <thead>
                    <tr>
                        <th>Setor Solicitante</th>
                        <th>Nome</th>
                        <th>Ramal</th>
                        <th>KM</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <SfTextBox Placeholder="Setor Solicitante" @bind-Value="vistoriaAtual.SetorSolicitante"></SfTextBox>
                        </td>
                        <td>
                            <SfTextBox Placeholder="Nome" @bind-Value="vistoriaAtual.Nome"></SfTextBox>
                        </td>
                        <td>
                            <SfTextBox Placeholder="Ramal" @bind-Value="vistoriaAtual.Ramal"></SfTextBox>
                        </td>
                        <td>
                            <SfTextBox Placeholder="KM" @bind-Value="vistoriaAtual.KM"></SfTextBox>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Seção: Dano/Avaria -->
        <div class="section">
            <div class="form-row-vertical">
                <label>Dano ou Avaria:</label>
                <SfTextBox Placeholder="Dano ou Avaria..." Multiline="true" CssClass="multiline"
                                               @bind-Value="vistoriaAtual.DanoAvaria"></SfTextBox>
            </div>
        </div>

        <!-- Seção: Rubrica -->
        <div class="section">
            <div class="form-row">
                <label>Rubrica:</label>
                <SfTextBox Placeholder="Rubrica" @bind-Value="vistoriaAtual.Rubrica"></SfTextBox>
            </div>
        </div>

        <!-- Seção: Vistoria Final -->
        <div class="section-title">VISTORIA FINAL</div>
        <div class="section">
            <div class="form-row">
                <label>Data/hora:</label>
                <SfDateTimePicker TValue="DateTime ?" Placeholder="Data/Hora Final"
                                           Min="@min" Max="@max" EnableMask="true"
                                           @bind-Value="vistoriaAtual.DataHoraFinal">
                </SfDateTimePicker>
            </div>
            <div class="form-row">
                <label>Nível de combustível:</label>
                <SfDropDownList TValue="string" TItem="string"
                                                      @bind-Value="vistoriaAtual.NivelCombustivelFinal"
                                                      Placeholder="Selecione o Nível de Combustível Final"
                                                      DataSource="@combustivelOptions">
                </SfDropDownList>
            </div>
            <div class="form-row">
                <label>Ponto Final:</label>
                <SfComboBox TValue="string" TItem="PontoFields" Placeholder="Ponto Final"
                                                DataSource="@Pontos" @bind-Value="vistoriaAtual.PontoFinalID"
                                                EnableVirtualization="true">
                    <ComboBoxFieldSettings Value="PontoID" Text="Descricao"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>

        <!-- Seção: Captura de Mídia -->
        <div class="section">
            <div class="form-row">
                <label>Capturar Mídia:</label>
                <SfButton OnClick="@CapturePhoto"> 🎥 Tirar Foto</SfButton>
                <SfButton OnClick="@CaptureVideo"> 📷  Gravar Vídeo</SfButton>
            </div>

            <!-- Galeria de Imagens -->
            <div class="image-gallery">
                @foreach (var image in vistoriaAtual.Fotos)
                {
                    <img src="@image" class="captured-media" width="100" height="100" />
                }
            </div>
            <!-- Galeria de Vídeos -->
            <div class="video-gallery">
                @foreach (var video in vistoriaAtual.Videos)
                {
                    <video width="150" height="100" controls>
                        <source src="@video" type="video/mp4">
                        Seu navegador não suporta vídeos.
                    </video>
                }
            </div>
            <!-- Botão para Salvar a Vistoria -->
            <SfButton OnClick="@SalvarVistoria"> 💾 Salvar Vistoria</SfButton>
        </div>
    </div>
}

@code {
    private bool carregando = true;
    private List<PlacaFields> Placas = new();
    private List<MotoristaFields> Motoristas = new();
    private List<PontoFields> Pontos = new();
    private Vistorias vistoriaAtual = new();
    private List<string> combustivelOptions = new List<string> { "Cheio", "3/4", "2/4", "1/4" };
    public DateTime min { get; set; } = DateTime.Now.AddYears(-5);
    public DateTime max { get; set; } = DateTime.Now.AddYears(5);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carregar dados da API
            Placas = await vistoriaService.ObterPlacasAsync();
            Motoristas = await vistoriaService.ObterMotoristasAsync();
            Pontos = await vistoriaService.ObterPontosAsync();

            Debug.WriteLine($"Placas carregadas: {Placas.Count}");
            Debug.WriteLine($"Motoristas carregados: {Motoristas.Count}");
            Debug.WriteLine($"Pontos carregados: {Pontos.Count}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
        finally
        {
            carregando = false; // Muda o estado para não mostrar mais "Carregando"
            StateHasChanged(); // Força a atualização da tela
        }
    }

    // Métodos de captura de foto e vídeo
    private async Task CapturePhoto()
    {
        try
        {
            var photo = await MediaPicker.CapturePhotoAsync();
            if (photo != null)
            {
                var filePath = Path.Combine(FileSystem.AppDataDirectory, photo.FileName);
                using var stream = await photo.OpenReadAsync();
                using var newStream = File.OpenWrite(filePath);
                await stream.CopyToAsync(newStream);

                vistoriaAtual.Fotos.Add(filePath); // ⬅️ usa caminho local
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"⚠️ Erro ao capturar foto: {ex.Message}");
        }
    }

    private async Task CaptureVideo()
    {
        try
        {
            var video = await MediaPicker.CaptureVideoAsync();
            if (video != null)
            {
                var filePath = Path.Combine(FileSystem.AppDataDirectory, video.FileName);
                using var stream = await video.OpenReadAsync();
                using var newStream = File.OpenWrite(filePath);
                await stream.CopyToAsync(newStream);

                vistoriaAtual.Videos.Add(filePath); // ⬅️ usa caminho local
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"⚠️ Erro ao capturar vídeo: {ex.Message}");
        }
    }

    private async Task SalvarVistoria()
    {
        try
        {

            // Log para ver os valores antes de enviar
            Debug.WriteLine($"Combustível Inicial: {vistoriaAtual.NivelCombustivelInicial}");
            Debug.WriteLine($"Combustível Final: {vistoriaAtual.NivelCombustivelFinal}");

            Debug.WriteLine("📝 Salvando vistoria...");
            bool sucesso = await vistoriaService.SalvarVistoria(vistoriaAtual);

            if (sucesso)
                Debug.WriteLine("✅ Vistoria salva com sucesso!");
            else
                Debug.WriteLine("❌ Erro ao salvar vistoria.");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"❌ Erro ao salvar: {ex.Message}");
        }
    }
}
