@page "/vistoria"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using Microsoft.Maui.Media
@using System.Text.Json
@using System.IO
@using FrotixTeste.Services
@inject VistoriaService vistoriaService
@using System.Diagnostics;
@using FrotixTeste.Models

<h4>Vistoria</h4>

@if (carregando)
{
    <p>🔄 Carregando dados...</p>
}
else
{
    <SfTab>
        <TabItems>
            <TabItem Header="Dados Iniciais">
                <ContentTemplate>
                    <div class="form-section">
                        <!-- Placa -->
                        <SfComboBox TValue="Guid ?" TItem="PlacaFields" Placeholder="Selecione a Placa"
                                    DataSource="@Placas" @bind-Value="vistoriaAtual.PlacaID"
                                    EnableVirtualization="true">
                            <ComboBoxFieldSettings Value="VeiculoId" Text="Placa"></ComboBoxFieldSettings>
                        </SfComboBox>

                        <!-- Motorista -->
                        <SfComboBox TValue="Guid?" TItem="MotoristaFields"
                                    Placeholder="Selecione o Motorista"
                                    DataSource="@Motoristas"
                                    @bind-Value="vistoriaAtual.MotoristaID"
                                    EnableVirtualization="true">
                            <ComboBoxFieldSettings Value="MotoristaID" Text="Nome"></ComboBoxFieldSettings>
                        </SfComboBox>

                        <!-- Número da Ficha -->
                        <SfNumericTextBox TValue="int?" Placeholder="Número da Ficha" @bind-Value="vistoriaAtual.NumeroFicha" />
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem Header="Vistoria Inicial">
                <h4>Vistoria Inicial</h4>
                <ContentTemplate>
                    <div class="form-section">
                        <!-- Data/Hora Inicial -->
                        <SfDateTimePicker TValue="DateTime?" Placeholder="Data/Hora Inicial"
                                          Min="@min" Max="@max" EnableMask="true"
                                          @bind-Value="vistoriaAtual.DataHoraInicio" />

                        <!-- CRLV e Cartão de Abastecimento -->
                        <div class="checkbox-group">
                            <label>CRLV:</label>
                            <SfCheckBox @bind-Checked="vistoriaAtual.CRLV" Label="CRLV"></SfCheckBox>
                            <label>Cartão de Abastecimento:</label>
                            <SfCheckBox @bind-Checked="vistoriaAtual.CartaoAbastecimento" Label="Cartão de Abastecimento"></SfCheckBox>
                        </div>

                        <!-- Nível de Combustível Inicial -->
                        <label>Nível de Combustível Inicial:</label>
                        <div class="fuel-radios">
                            @foreach (var nivel in combustivelNiveis)
                            {
                                <SfRadioButton TChecked="string" Label="@nivel" Name="nivelInicial"
                                               Value="@nivel" @bind-CheckedValue="vistoriaAtual.NivelCombustivelInicial" />
                            }
                        </div>

                        <!-- Ponto Inicial -->
                        <SfComboBox TValue="string" TItem="PontoFields" Placeholder="Ponto Inicial"
                                    DataSource="@Pontos" @bind-Value="vistoriaAtual.PontoID"
                                    EnableVirtualization="true">
                            <ComboBoxFieldSettings Value="PontoID" Text="Descricao"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem Header="Solicitante">
                <ContentTemplate>
                    <div class="form-section">
                        <SfTextBox Placeholder="Setor Solicitante" @bind-Value="vistoriaAtual.SetorSolicitante" />
                        <SfTextBox Placeholder="Nome" @bind-Value="vistoriaAtual.Nome" />
                        <SfTextBox Placeholder="Ramal" @bind-Value="vistoriaAtual.Ramal" />
                        <SfTextBox Placeholder="KM" @bind-Value="vistoriaAtual.KM" />
                    </div>
                </ContentTemplate>
            </TabItem>


            <h4>Vistoria Final</h4>
            <TabItem Header="Dano / Final">
                <ContentTemplate>
                    <div class="form-section">
                        <SfTextBox Placeholder="Dano ou Avaria..." Multiline="true" CssClass="multiline"
                                   @bind-Value="vistoriaAtual.DanoAvaria" />
                        <SfTextBox Placeholder="Rubrica" @bind-Value="vistoriaAtual.Rubrica" />

                        <!-- Data/Hora Final -->
                        <SfDateTimePicker TValue="DateTime?" Placeholder="Data/Hora Final"
                                          Min="@min" Max="@max" EnableMask="true"
                                          @bind-Value="vistoriaAtual.DataHoraFinal" />

                        <!-- Nível de Combustível Final -->
                        <label>Nível de Combustível Final:</label>
                        <div class="fuel-radios">
                            @foreach (var nivel in combustivelNiveis)
                            {
                                <SfRadioButton TChecked="string" Label="@nivel" Name="nivelFinal"
                                               Value="@nivel" @bind-CheckedValue="vistoriaAtual.NivelCombustivelFinal" />
                            }
                        </div>

                        <!-- Ponto Final -->
                        <SfComboBox TValue="string" TItem="PontoFields" Placeholder="Ponto Final"
                                    DataSource="@Pontos" @bind-Value="vistoriaAtual.PontoFinalID"
                                    EnableVirtualization="true">
                            <ComboBoxFieldSettings Value="PontoID" Text="Descricao"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem Header="Mídia">
                <ContentTemplate>
                    <div class="form-section">
                        <SfButton OnClick="CapturePhoto">📷 Tirar Foto</SfButton>
                        <SfButton OnClick="CaptureVideo">🎥 Gravar Vídeo</SfButton>

                        <h4>Fotos:</h4>
                        <div class="image-gallery">
                            @foreach (var foto in vistoriaAtual.Fotos)
                            {
                                <img src="@foto" width="100" height="100" class="captured-media" />
                            }
                        </div>

                        <h4>Vídeos:</h4>
                        <div class="video-gallery">
                            @foreach (var video in vistoriaAtual.Videos)
                            {
                                <video width="150" height="100" controls>
                                    <source src="@video" type="video/mp4">
                                </video>
                            }
                        </div>

                        <SfButton CssClass="e-success" OnClick="SalvarVistoria">💾 Salvar</SfButton>
                    </div>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
}

@code {
    private bool carregando = true;
    private List<PlacaFields> Placas = new();
    private List<MotoristaFields> Motoristas = new();
    private List<PontoFields> Pontos = new();
    private List<string> combustivelNiveis = new() { "Cheio", "3/4", "2/4", "1/4" };
    private Vistorias vistoriaAtual = new();
    public DateTime min { get; set; } = DateTime.Now.AddYears(-5);
    public DateTime max { get; set; } = DateTime.Now.AddYears(5);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carregar dados da API
            Placas = await vistoriaService.ObterPlacasAsync();
            Motoristas = await vistoriaService.ObterMotoristasAsync();
            Pontos = await vistoriaService.ObterPontosAsync();

            Debug.WriteLine($"Placas carregadas: {Placas.Count}");
            Debug.WriteLine($"Motoristas carregados: {Motoristas.Count}");
            Debug.WriteLine($"Pontos carregados: {Pontos.Count}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
        finally
        {
            carregando = false; // Muda o estado para não mostrar mais "Carregando"
            StateHasChanged(); // Força a atualização da tela
        }
    }

    // Métodos de captura de foto e vídeo
    private async Task CapturePhoto()
    {
        try
        {
            var photo = await MediaPicker.CapturePhotoAsync();
            if (photo != null)
            {
                var filePath = Path.Combine(FileSystem.AppDataDirectory, photo.FileName);
                using var stream = await photo.OpenReadAsync();
                using var newStream = File.OpenWrite(filePath);
                await stream.CopyToAsync(newStream);

                vistoriaAtual.Fotos.Add(filePath); // ⬅️ usa caminho local
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"⚠️ Erro ao capturar foto: {ex.Message}");
        }
    }

    private async Task CaptureVideo()
    {
        try
        {
            var video = await MediaPicker.CaptureVideoAsync();
            if (video != null)
            {
                var filePath = Path.Combine(FileSystem.AppDataDirectory, video.FileName);
                using var stream = await video.OpenReadAsync();
                using var newStream = File.OpenWrite(filePath);
                await stream.CopyToAsync(newStream);

                vistoriaAtual.Videos.Add(filePath); // ⬅️ usa caminho local
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"⚠️ Erro ao capturar vídeo: {ex.Message}");
        }
    }

    private async Task SalvarVistoria()
    {
        try
        {
            Debug.WriteLine("📝 Salvando vistoria...");
            bool sucesso = await vistoriaService.SalvarVistoria(vistoriaAtual);

            if (sucesso)
                Debug.WriteLine("✅ Vistoria salva com sucesso!");
            else
                Debug.WriteLine("❌ Erro ao salvar vistoria.");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"❌ Erro ao salvar: {ex.Message}");
        }
    }
}
